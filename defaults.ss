(define (identifier-symbol-eq? x y)
  (eq? (syntax->datum x) (syntax->datum y)))

(define-syntax (define-defaults x)
  (syntax-case x ()
    [(_ name ([field default] ...) b1 b2 ...)
     (and (identifier? #'name)
          (let valid-fields? ([fields #'(field ...)] [seen '()])
            (syntax-case fields ()
              [(fn . rest)
               (and (identifier? #'fn)
                    (let ([f (syntax->datum #'fn)])
                      (when (memq f seen)
                        (syntax-error x (format "duplicate field ~a in" f)))
                      (valid-fields? #'rest (cons f seen))))]
              [() #t]
              [_ #f])))
     #'(begin
       (define-syntax (name x)
         (define (valid-bindings? bindings seen)
           (syntax-case bindings ()
             [((fn fv) . rest)
              (and (identifier? #'fn)
                   (let ([f (syntax->datum #'fn)])
                     (when (memq f seen)
                       (syntax-error x (format "duplicate field ~a in" f)))
                     (unless (memq f '(field ...))
                       (syntax-error x (format "unknown field ~a in" f)))
                     (valid-bindings? #'rest (cons f seen))))]
             [() #t]
             [_ #f]))
         (define (build-args fields defaults bindings)
           (if (snull? fields)
               '()
               (let* ([f (scar fields)]
                      [v (find-binding f bindings)])
                 (if v
                     (cons v (build-args (scdr fields) (scdr defaults)
                               (remove-binding f bindings)))
                     (cons (scar defaults)
                           (build-args (scdr fields) (scdr defaults)
                             bindings))))))
         
         (define (find-binding f bindings)
           (syntax-case bindings ()
             [((fn fv) . rest)
              (if (identifier-symbol-eq? #'fn f)
                  #'fv
                  (find-binding f #'rest))]
             [() #f]))
         (define (remove-binding f bindings)
           (syntax-case bindings ()
             [((fn fv) . rest)
              (if (identifier-symbol-eq? #'fn f)
                  #'rest
                  #`((fn fv) #,@(remove-binding f #'rest)))]))
         (define (snull? x) (syntax-case x () [() #t] [_ #f]))
         (define (scar x) (syntax-case x () [(x . _) #'x]))
         (define (scdr x) (syntax-case x () [(_ . y) #'y]))
         (syntax-case x ()
           [(name . bindings)
            (valid-bindings? #'bindings '())
            #`(defaults-proc #,@(build-args #'(field ...) #'(default ...) #'bindings))]))
       (define (defaults-proc field ...)
         b1 b2 ...))]))
