(define-syntax (define-defaults x)
  (syntax-case x ()
    [(_ name ([field default] ...) b1 b2 ...)
     (and (identifier? #'name)
          (let valid-fields? ([fields #'(field ...)] [seen '()])
            (syntax-case fields ()
              [(fn . rest)
               (and (identifier? #'fn)
                    (let ([f (datum fn)])
                      (when (memq f seen)
                        (bad-syntax "duplicate field" x #'fn))
                      (valid-fields? #'rest (cons f seen))))]
              [() #t]
              [_ #f])))
     #'(begin
         (define-syntax (name x)
           (define (valid-bindings? bindings seen)
             (syntax-case bindings ()
               [((fn fv) . rest)
                (and (identifier? #'fn)
                     (let ([f (datum fn)])
                       (when (memq f seen)
                         (bad-syntax "duplicate field" x #'fn))
                       (unless (memq f '(field ...))
                         (bad-syntax "unknown field" x #'fn))
                       (valid-bindings? #'rest (cons f seen))))]
               [() #t]
               [_ #f]))
           (define (build-args fields defaults bindings)
             (if (snull? fields)
                 '()
                 (let* ([f (scar fields)]
                        [v (find-binding f bindings)])
                   (if v
                       (cons v (build-args (scdr fields) (scdr defaults)
                                 (remove-binding f bindings)))
                       (cons (scar defaults)
                         (build-args (scdr fields) (scdr defaults)
                           bindings))))))
           (define (find-binding f bindings)
             (syntax-case bindings ()
               [((fn fv) . rest)
                (if (syntax-datum-eq? #'fn f)
                    #'fv
                    (find-binding f #'rest))]
               [() #f]))
           (define (remove-binding f bindings)
             (syntax-case bindings ()
               [((fn fv) . rest)
                (if (syntax-datum-eq? #'fn f)
                    #'rest
                    #`((fn fv) #,@(remove-binding f #'rest)))]))
           (syntax-case x ()
             [(name . bindings)
              (valid-bindings? #'bindings '())
              #`(defaults-proc #,@(build-args #'(field ...) #'(default ...) #'bindings))]))
         (define (defaults-proc field ...)
           b1 b2 ...))]))
